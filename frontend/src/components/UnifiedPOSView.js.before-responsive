// frontend/src/components/UnifiedPOSView.js - Versi√≥n completa con UTF-8 corregido
import React, { useState, useEffect } from 'react';
import { useGlobalState } from '../context/GlobalStateContext';
import { 
  ShoppingCart, Users, Truck, Package, Phone, MapPin, Plus, Search, 
  Minus, Check, X, AlertTriangle, CreditCard, Trash2, Percent
} from 'lucide-react';
// Importaciones para persistencia
import dataPersistence from '../services/DataPersistence';
import { usePersistentTables } from '../hooks/usePersistentTables';

import { useSocket } from '../hooks/useSocket';
const UnifiedPOSView = ({ apiService, user }) => {
  // Usar mesas persistentes en lugar del estado global
  const {
    mesas: persistentTables,
    loading: tablesLoading,
    agregarMesa,
    cambiarEstadoMesa
  } = usePersistentTables();

  // Estado global (manteniendo funcionalidad existente)
  const {
    customers, menuItems, categories,
    setCustomers, setMenuItems, setCategories,
    addToCart, updateCartItem, clearCart, getCurrentCart, hasItemsInCart
  } = useGlobalState();

  // Estados locales de UI
  const [orderType, setOrderType] = useState('dine-in');
  const [selectedTable, setSelectedTable] = useState(null);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showCustomerModal, setShowCustomerModal] = useState(false);
  const [showPayment, setShowPayment] = useState(false);
  const [customerSearch, setCustomerSearch] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('cash');

  // Estados para descuentos
  const [descuento, setDescuento] = useState(0);
  const [tipoDescuento, setTipoDescuento] = useState('porcentaje'); // 'porcentaje' o 'fijo'
  const [mostrarDescuento, setMostrarDescuento] = useState(false);

  // Estado para nuevo cliente
  const [newCustomer, setNewCustomer] = useState({
    phone: '',
    name: '',
    address1: '',
    address2: '',
    city: 'Ciudad Guzm√°n'
  });

  // Estados para debug y control de persistencia
  const [lastSelectedTableId, setLastSelectedTableId] = useState(null);

  // Usar mesas persistentes en lugar de estado global
  const tables = persistentTables;

  // üî• Socket.io para sincronizaci√≥n en tiempo real
  const { socket, isConnected, on, off } = useSocket();

  // üîÑ Listener: Sincronizar cuando se crea un producto
  useEffect(() => {
    if (!socket) return;

    const handleMenuItemCreated = (data) => {
      console.log("üÜï Nuevo producto creado:", data.menuItem);
      setMenuItems(prev => [...prev, data.menuItem]);
    };

    const handleMenuItemUpdated = (data) => {
      console.log("‚úèÔ∏è Producto actualizado:", data.menuItem);
      setMenuItems(prev => prev.map(item => 
        item.id === data.menuItem.id ? data.menuItem : item
      ));
    };

    const handleMenuItemDeleted = (data) => {
      console.log("üóëÔ∏è Producto eliminado:", data.itemId);
      setMenuItems(prev => prev.filter(item => item.id !== data.itemId));
    };

    const handleCategoryCreated = (data) => {
      console.log("üÜï Nueva categor√≠a creada:", data.category);
      setCategories(prev => [...prev, data.category]);
    };

    const handleCategoryUpdated = (data) => {
      console.log("‚úèÔ∏è Categor√≠a actualizada:", data.category);
      setCategories(prev => prev.map(cat => 
        cat.id === data.category.id ? data.category : cat
      ));
    };

    const handleTableStatusChanged = (data) => {
      console.log("ü™ë Estado de mesa cambiado:", data);
      // Actualizar estado de mesas si es necesario
    };

    const handleCartUpdated = (data) => {
      console.log("üõí Carrito actualizado en mesa", data.tableId);
      // Si es la mesa actual, recargar el carrito
      if (selectedTable?.id === data.tableId) {
        // Aqu√≠ podr√≠as recargar el carrito de la mesa
      }
    };

    // Registrar listeners
    on("menu-item-created", handleMenuItemCreated);
    on("menu-item-updated", handleMenuItemUpdated);
    on("menu-item-deleted", handleMenuItemDeleted);
    on("category-created", handleCategoryCreated);
    on("category-updated", handleCategoryUpdated);
    on("table-status-changed", handleTableStatusChanged);
    on("cart-updated", handleCartUpdated);

    // Cleanup
    return () => {
      off("menu-item-created", handleMenuItemCreated);
      off("menu-item-updated", handleMenuItemUpdated);
      off("menu-item-deleted", handleMenuItemDeleted);
      off("category-created", handleCategoryCreated);
      off("category-updated", handleCategoryUpdated);
      off("table-status-changed", handleTableStatusChanged);
      off("cart-updated", handleCartUpdated);
    };
  }, [socket, on, off, setMenuItems, setCategories, selectedTable]);

  // Cargar datos iniciales solo si no existen
  useEffect(() => {
    if (menuItems.length === 0) {
      loadInitialData();
    }
  }, [menuItems.length]);

  // Inicializar persistencia al cargar componente
  useEffect(() => {
    const initPersistence = async () => {
      try {
        await dataPersistence.init();
        console.log('‚úÖ Sistema de persistencia inicializado');
      } catch (error) {
        console.error('Error inicializando persistencia:', error);
      }
    };
    initPersistence();
  }, []);

  // NUEVA L√ìGICA MEJORADA: Cargar carrito persistente solo cuando sea necesario
  useEffect(() => {
    if (selectedTable && orderType === 'dine-in' && selectedTable.id !== lastSelectedTableId) {
      console.log('üîÑ Seleccionando mesa:', selectedTable.numero, 'ID:', selectedTable.id);
      setLastSelectedTableId(selectedTable.id);
      verificarYCargarCarrito();
    }
  }, [selectedTable?.id, orderType]);

  // FUNCI√ìN MEJORADA: Verificar y cargar carrito sin sobrescribir
  const verificarYCargarCarrito = async () => {
    try {
      const cartKey = `table-${selectedTable.id}`;
      const carritoActual = getCurrentCart(cartKey);
      
      console.log('üìã Estado del carrito actual:', carritoActual.length, 'items');
      
      // Solo cargar desde persistencia si el carrito actual est√° REALMENTE vac√≠o
      if (carritoActual.length === 0) {
        const carritoGuardado = await dataPersistence.obtenerCarrito(selectedTable.id);
        console.log('üíæ Carrito guardado encontrado:', carritoGuardado.length, 'items');
        
        if (carritoGuardado.length > 0) {
          console.log('üîÑ Restaurando carrito desde persistencia...');
          
          // Usar un peque√±o delay para asegurar que el estado se actualice correctamente
          setTimeout(() => {
            carritoGuardado.forEach(item => {
              const itemBase = {
                id: item.id,
                name: item.name || item.nombre,
                price: item.price || item.precio
              };
              
              // Agregar el item la cantidad de veces guardada
              for (let i = 0; i < (item.cantidad || item.quantity || 1); i++) {
                addToCart(cartKey, itemBase);
              }
            });
            console.log('‚úÖ Carrito restaurado exitosamente');
          }, 100);
        }
      } else {
        console.log('üîå Carrito actual tiene productos, no sobrescribiendo');
        // Si hay carrito actual, asegurar que est√© guardado en persistencia
        await guardarCarritoEnPersistencia(selectedTable.id, carritoActual);
      }
    } catch (error) {
      console.error('‚ùå Error verificando carrito:', error);
    }
  };

  // FUNCI√ìN AUXILIAR: Guardar carrito en persistencia
  const guardarCarritoEnPersistencia = async (mesaId, carrito) => {
    try {
      if (carrito.length > 0) {
        await dataPersistence.guardarCarrito(mesaId, carrito);
        console.log('üíæ Carrito guardado en persistencia:', carrito.length, 'items');
      }
    } catch (error) {
      console.error('‚ùå Error guardando carrito:', error);
    }
  };

  // Establecer categor√≠a por defecto
  useEffect(() => {
    if (categories.length > 0 && !selectedCategory) {
      setSelectedCategory(categories[0].id);
    }
  }, [categories, selectedCategory]);

  // Efecto mejorado para sincronizar estado de mesas con persistencia
  useEffect(() => {
    tables.forEach(table => {
      const cartKey = `table-${table.id}`;
      const hasItems = hasItemsInCart(cartKey);
      
      // Si la mesa tiene productos pero est√° marcada como disponible, cambiarla a ocupada
      if (hasItems && table.estado === 'disponible') {
        updateTableStatusAutomatically(table.id, 'ocupada');
      }
      // Si la mesa no tiene productos pero est√° marcada como ocupada, cambiarla a disponible
      else if (!hasItems && table.estado === 'ocupada') {
        updateTableStatusAutomatically(table.id, 'disponible');
      }
    });
  }, [tables, hasItemsInCart]);

  const loadInitialData = async () => {
    setLoading(true);
    try {
      const [categoriesData, menuData, customersData] = await Promise.all([
        apiService.getCategories(),
        apiService.getMenu(),
        loadCustomers()
      ]);
      
      setCategories(categoriesData);
      setMenuItems(menuData);
      setCustomers(customersData);
    } catch (error) {
      setError('Error cargando datos: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funci√≥n mejorada con persistencia
  const updateTableStatusAutomatically = async (tableId, newStatus) => {
    try {
      // Actualizar en persistencia local
      await cambiarEstadoMesa(tableId, newStatus);
      
      // Intentar actualizar en el backend si est√° disponible
      try {
        await apiService.updateTableStatus(tableId, newStatus);
      } catch (backendError) {
        console.warn('Backend no disponible, estado actualizado solo localmente');
      }
    } catch (error) {
      console.error('Error actualizando estado de mesa:', error);
    }
  };

  // Funci√≥n para cargar clientes
  const loadCustomers = async () => {
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/api/customers`, {
        headers: {
          'Authorization': `Bearer ${apiService.token}`,
          'Content-Type': 'application/json'
        }
      });
      const data = await response.json();
      return data.customers || [];
    } catch (error) {
      console.error('Error cargando clientes:', error);
      return [];
    }
  };

  // Crear nuevo cliente
  const createCustomer = async () => {
    if (!newCustomer.phone || !newCustomer.name || !newCustomer.address1) {
      setError('Tel√©fono, nombre y direcci√≥n son requeridos');
      return;
    }

    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001'}/api/customers`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiService.token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newCustomer)
      });

      const data = await response.json();
      
      if (data.success) {
        setCustomers([...customers, data.customer]);
        handleCustomerSelect(data.customer);
        setNewCustomer({
          phone: '',
          name: '',
          address1: '',
          address2: '',
          city: 'Ciudad Guzm√°n'
        });
        setError('');
      } else {
        setError(data.error || 'Error creando cliente');
      }
    } catch (error) {
      setError('Error creando cliente: ' + error.message);
    }
  };

  // Funciones de manejo de estados
  const handleOrderTypeChange = (type) => {
    setOrderType(type);
    setSelectedTable(null);
    setSelectedCustomer(null);
    setLastSelectedTableId(null); // Reset del control de tabla
    setError('');
    // Resetear descuentos al cambiar tipo de orden
    setDescuento(0);
    setMostrarDescuento(false);
  };

  const handleTableSelect = (table) => {
    if (orderType !== 'dine-in') return;
    
    console.log('ü™ë Seleccionando mesa:', table.numero, 'Estado actual:', table.estado);
    
    setSelectedTable(table);
    // Resetear descuentos al cambiar mesa
    setDescuento(0);
    setMostrarDescuento(false);
  };

  const handleCustomerSelect = (customer) => {
    setSelectedCustomer(customer);
    setShowCustomerModal(false);
    // Resetear descuentos al cambiar cliente
    setDescuento(0);
    setMostrarDescuento(false);
  };

  // Funciones del carrito con sincronizaci√≥n autom√°tica MEJORADAS
  const getCartKey = () => {
    if (orderType === 'dine-in' && selectedTable) return `table-${selectedTable.id}`;
    if (orderType === 'delivery' && selectedCustomer) return `delivery-${selectedCustomer.id}`;
    if (orderType === 'takeaway') return 'takeaway';
    return null;
  };

  // FUNCI√ìN MEJORADA: Agregar al carrito con persistencia inmediata
  const handleAddToCart = async (item) => {
    const cartKey = getCartKey();
    if (!cartKey) {
      if (orderType === 'dine-in') setError('Selecciona una mesa primero');
      if (orderType === 'delivery') setError('Selecciona un cliente primero');
      return;
    }

    console.log('‚ûï Agregando producto:', item.name, 'a', cartKey);
    
    addToCart(cartKey, item);
    setError('');

    // Guardar en persistencia INMEDIATAMENTE despu√©s de agregar
    if (orderType === 'dine-in' && selectedTable) {
      // Usar setTimeout para permitir que React actualice el estado primero
      setTimeout(async () => {
        try {
          const currentCart = getCurrentCart(cartKey);
          await guardarCarritoEnPersistencia(selectedTable.id, currentCart);
          
          // Si es una mesa y est√° disponible, cambiarla a ocupada autom√°ticamente
          if (selectedTable.estado === 'disponible') {
            updateTableStatusAutomatically(selectedTable.id, 'ocupada');
          }
        } catch (error) {
          console.error('Error guardando carrito despu√©s de agregar:', error);
        }
      }, 100);
    }
  };

  // FUNCI√ìN MEJORADA: Actualizar cantidad con persistencia inmediata
  const handleUpdateQuantity = async (itemId, newQuantity) => {
    const cartKey = getCartKey();
    if (!cartKey) return;
    
    console.log('üîÑ Actualizando cantidad. Item:', itemId, 'Nueva cantidad:', newQuantity);
    
    updateCartItem(cartKey, itemId, newQuantity);

    // Guardar en persistencia INMEDIATAMENTE
    if (orderType === 'dine-in' && selectedTable) {
      setTimeout(async () => {
        try {
          const currentCart = getCurrentCart(cartKey);
          await guardarCarritoEnPersistencia(selectedTable.id, currentCart);
          
          // Si se vac√≠a el carrito de una mesa, cambiarla a disponible
          if (currentCart.length === 0 && selectedTable.estado === 'ocupada') {
            updateTableStatusAutomatically(selectedTable.id, 'disponible');
          }
        } catch (error) {
          console.error('Error actualizando carrito persistente:', error);
        }
      }, 100);
    }
  };

  // FUNCI√ìN MEJORADA: Limpiar carrito con persistencia
  const handleClearCart = async () => {
    const cartKey = getCartKey();
    if (!cartKey) return;
    
    console.log('üóëÔ∏è Limpiando carrito:', cartKey);
    
    clearCart(cartKey);

    // Limpiar persistencia si es una mesa
    if (orderType === 'dine-in' && selectedTable) {
      try {
        await dataPersistence.limpiarCarritoMesa(selectedTable.id);
        // Si se limpia el carrito de una mesa, cambiarla a disponible
        if (selectedTable.estado === 'ocupada') {
          updateTableStatusAutomatically(selectedTable.id, 'disponible');
        }
      } catch (error) {
        console.error('Error limpiando carrito persistente:', error);
      }
    }

    // Resetear descuentos al limpiar carrito
    setDescuento(0);
    setMostrarDescuento(false);
  };

  // Nueva funci√≥n para calcular total sin IVA y con descuentos
  const getCartTotal = () => {
    const cartKey = getCartKey();
    const currentCart = getCurrentCart(cartKey);
    const subtotal = currentCart.reduce((total, item) => total + (item.price * item.quantity), 0);
    
    // Calcular descuento
    const montoDescuento = tipoDescuento === 'porcentaje' 
      ? (subtotal * descuento) / 100 
      : descuento;
    
    // Total final SIN IVA
    return Math.max(0, subtotal - montoDescuento);
  };

  const getCartSubtotal = () => {
    const cartKey = getCartKey();
    const currentCart = getCurrentCart(cartKey);
    return currentCart.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getCartDiscount = () => {
    const subtotal = getCartSubtotal();
    return tipoDescuento === 'porcentaje' 
      ? (subtotal * descuento) / 100 
      : descuento;
  };

  // Funciones para manejar descuentos
  const handleAplicarDescuento = () => {
    if (descuento < 0) setDescuento(0);
    if (tipoDescuento === 'porcentaje' && descuento > 100) setDescuento(100);
    if (tipoDescuento === 'fijo' && descuento > getCartSubtotal()) setDescuento(getCartSubtotal());
    setMostrarDescuento(false);
  };

  const handleQuitarDescuento = () => {
    setDescuento(0);
    setMostrarDescuento(false);
  };

  // FUNCI√ìN MEJORADA: Procesar venta con persistencia y folios
  const processSale = async () => {
    const cartKey = getCartKey();
    const currentCart = getCurrentCart(cartKey);
    
    if (currentCart.length === 0) {
      setError('El carrito est√° vac√≠o');
      return;
    }

    setLoading(true);
    try {
      // Obtener folio persistente
      const folio = await dataPersistence.obtenerSiguienteFolio();
      
      const saleData = {
        folio: folio,
        items: currentCart.map(item => ({
          id: item.id,
          quantity: item.quantity
        })),
        orderType,
        tableId: selectedTable?.id || null,
        customerId: selectedCustomer?.id || null,
        paymentMethod,
        subtotal: getCartSubtotal(),
        descuento: getCartDiscount(),
        tipo_descuento: tipoDescuento,
        total: getCartTotal(),
        notes: `Venta procesada por ${user.name}`,
        deviceId: `device_${user.id}`
      };

      console.log('üí∞ Procesando venta:', saleData);

      // Guardar venta en persistencia
      await dataPersistence.guardarVenta(saleData);

      // Intentar enviar al backend si est√° disponible
      try {
        await apiService.createSale(saleData);
        console.log('‚úÖ Venta enviada al backend');
      } catch (backendError) {
        console.warn('‚ö†Ô∏è Backend no disponible, venta guardada solo localmente');
      }

      // Limpiar carrito y persistencia
      clearCart(cartKey);
      if (orderType === 'dine-in' && selectedTable) {
        await dataPersistence.limpiarCarritoMesa(selectedTable.id);
        await updateTableStatusAutomatically(selectedTable.id, 'disponible');
        setSelectedTable(null);
        setLastSelectedTableId(null); // Reset del control
      }
      
      setShowPayment(false);
      setError('');
      setDescuento(0);
      setMostrarDescuento(false);
      
      alert(`¬°Venta procesada exitosamente!\nFolio: ${folio}\nTotal: $${getCartTotal().toFixed(2)}`);
      
    } catch (error) {
      console.error('‚ùå Error procesando venta:', error);
      setError('Error procesando venta: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // Funci√≥n mejorada para obtener color de mesa
  const getTableStatusColor = (table) => {
    const cartKey = `table-${table.id}`;
    const hasItems = hasItemsInCart(cartKey);
    
    // Si tiene items en el carrito, debe mostrarse como ocupada
    if (hasItems) {
      return 'bg-red-500 hover:bg-red-600 text-white';
    }
    
    // Usar el estado de la mesa persistente
    switch (table.estado) {
      case 'disponible': return 'bg-green-500 hover:bg-green-600 text-white';
      case 'ocupada': return 'bg-red-500 hover:bg-red-600 text-white';
      case 'reservada': return 'bg-yellow-500 hover:bg-yellow-600 text-white';
      default: return 'bg-gray-500 hover:bg-gray-600 text-white';
    }
  };

  // Filtros
  const filteredItems = menuItems.filter(item => 
    !selectedCategory || item.categoryId === selectedCategory
  );

  const filteredCustomers = customers.filter(customer =>
    customer.phone.includes(customerSearch) ||
    customer.name.toLowerCase().includes(customerSearch.toLowerCase())
  );

  if ((loading && menuItems.length === 0) || tablesLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">Cargando datos...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* Header con tipo de pedido */}
      <div className="bg-white shadow-sm border-b p-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold text-gray-800">POS Unificado</h1>
          
          {/* Selector de tipo de pedido */}
          <div className="flex space-x-2">
            <button
              onClick={() => handleOrderTypeChange('dine-in')}
              className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                orderType === 'dine-in' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <Users className="mr-2" size={20} />
              Comer aqu√≠
            </button>
            
            <button
              onClick={() => handleOrderTypeChange('takeaway')}
              className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                orderType === 'takeaway' 
                  ? 'bg-green-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <Package className="mr-2" size={20} />
              Para llevar
            </button>
            
            <button
              onClick={() => handleOrderTypeChange('delivery')}
              className={`flex items-center px-4 py-2 rounded-lg transition-colors ${
                orderType === 'delivery' 
                  ? 'bg-orange-600 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <Truck className="mr-2" size={20} />
              A domicilio
            </button>
          </div>
        </div>
      </div>

      {error && (
        <div className="mx-4 mt-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded-lg flex items-center">
          <AlertTriangle className="w-4 h-4 mr-2" />
          {error}
        </div>
      )}

      <div className="flex flex-1">
        {/* Panel Izquierdo - Mesas o Clientes */}
        <div className="w-1/4 bg-white shadow-lg p-4">
          {orderType === 'dine-in' && (
            <>
              <div className="flex items-center mb-4">
                <Users className="mr-2 text-blue-600" size={24} />
                <h2 className="text-xl font-bold text-gray-800">Mesas Persistentes</h2>
              </div>
              
              <div className="grid grid-cols-2 gap-3">
                {tables.map(table => (
                  <button
                    key={table.id}
                    onClick={() => handleTableSelect(table)}
                    className={`
                      relative p-4 rounded-lg transition-all duration-200 transform hover:scale-105
                      ${getTableStatusColor(table)}
                      ${selectedTable?.id === table.id ? 'ring-4 ring-blue-400 ring-opacity-50' : ''}
                      ${hasItemsInCart(`table-${table.id}`) ? 'ring-4 ring-orange-400' : ''}
                    `}
                  >
                    <div className="text-center">
                      <div className="text-lg font-bold">Mesa {table.numero}</div>
                      <div className="text-sm opacity-90">{table.capacidad} personas</div>
                      {hasItemsInCart(`table-${table.id}`) && (
                        <div className="absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold border-2 border-white">
                          {getCurrentCart(`table-${table.id}`).length}
                        </div>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </>
          )}

          {orderType === 'delivery' && (
            <>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center">
                  <Phone className="mr-2 text-orange-600" size={24} />
                  <h2 className="text-xl font-bold text-gray-800">Clientes</h2>
                </div>
                <button
                  onClick={() => setShowCustomerModal(true)}
                  className="bg-orange-600 text-white p-2 rounded-lg hover:bg-orange-700"
                >
                  <Plus size={20} />
                </button>
              </div>

              <div className="mb-4">
                <div className="relative">
                  <Search className="absolute left-3 top-3 text-gray-400" size={20} />
                  <input
                    type="text"
                    placeholder="Buscar por tel√©fono o nombre..."
                    value={customerSearch}
                    onChange={(e) => setCustomerSearch(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  />
                </div>
              </div>

              <div className="space-y-2 max-h-96 overflow-y-auto">
                {filteredCustomers.map(customer => (
                  <button
                    key={customer.id}
                    onClick={() => handleCustomerSelect(customer)}
                    className={`w-full text-left p-3 rounded-lg transition-colors border ${
                      selectedCustomer?.id === customer.id
                        ? 'bg-orange-100 border-orange-500'
                        : 'bg-gray-50 border-gray-200 hover:bg-gray-100'
                    }`}
                  >
                    <div className="font-semibold text-gray-800">{customer.name}</div>
                    <div className="text-sm text-gray-600">{customer.phone}</div>
                    <div className="text-xs text-gray-500">{customer.address1}</div>
                  </button>
                ))}
              </div>
            </>
          )}

          {orderType === 'takeaway' && (
            <div className="text-center mt-8">
              <Package size={48} className="mx-auto mb-4 text-green-600" />
              <h2 className="text-xl font-bold text-gray-800 mb-2">Para Llevar</h2>
              <p className="text-gray-600">Agrega productos al pedido</p>
            </div>
          )}
        </div>

        {/* Panel Central - Men√∫ */}
        <div className="flex-1 p-4">
          {/* Categor√≠as */}
          <div className="flex space-x-2 mb-4 overflow-x-auto">
            <button
              onClick={() => setSelectedCategory(null)}
              className={`px-4 py-2 rounded-lg transition-colors whitespace-nowrap ${
                !selectedCategory 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-white text-gray-700 hover:bg-gray-50'
              }`}
            >
              Todos
            </button>
            {categories.map(category => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`flex items-center px-4 py-2 rounded-lg transition-colors whitespace-nowrap ${
                  selectedCategory === category.id 
                    ? 'bg-blue-600 text-white' 
                    : 'bg-white text-gray-700 hover:bg-gray-50'
                }`}
              >
                {category.name}
              </button>
            ))}
          </div>

          {/* Items del Men√∫ */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 overflow-y-auto max-h-[calc(100vh-200px)]">
            {filteredItems.map(item => (
              <button
                key={item.id}
                onClick={() => handleAddToCart(item)}
                className="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow border border-gray-200 hover:border-blue-300"
                disabled={loading}
              >
                <div className="text-center">
                  <div className="text-3xl mb-2">{item.image || 'üçΩÔ∏è'}</div>
                  <h3 className="font-semibold text-gray-800 mb-1 text-sm leading-tight">{item.name}</h3>
                  <p className="text-lg font-bold text-blue-600">${parseFloat(item.price).toFixed(2)}</p>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Panel de Carrito Mejorado */}
        <div className="w-1/3 bg-white shadow-lg flex flex-col">
          <div className="p-3 border-b border-gray-200 flex items-center justify-between">
            <div className="flex items-center">
              <ShoppingCart className="mr-2 text-green-600" size={20} />
              <h2 className="text-lg font-bold text-gray-800">Carrito</h2>
            </div>
            {orderType === 'dine-in' && selectedTable && (
              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-semibold">
                Mesa {selectedTable.numero}
              </span>
            )}
            {orderType === 'delivery' && selectedCustomer && (
              <span className="bg-orange-100 text-orange-800 px-2 py-1 rounded-full text-xs font-semibold">
                {selectedCustomer.name}
              </span>
            )}
            {orderType === 'takeaway' && (
              <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-semibold">
                Para llevar
              </span>
            )}
          </div>

          {!getCartKey() ? (
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center text-gray-500">
                <ShoppingCart size={48} className="mx-auto mb-4 opacity-50" />
                <p>
                  {orderType === 'dine-in' && 'Selecciona una mesa para comenzar'}
                  {orderType === 'delivery' && 'Selecciona un cliente para comenzar'}
                  {orderType === 'takeaway' && 'Agrega productos del men√∫'}
                </p>
              </div>
            </div>
          ) : getCurrentCart(getCartKey()).length === 0 ? (
            <div className="flex-1 flex items-center justify-center">
              <div className="text-center text-gray-500">
                <p>Carrito vac√≠o</p>
                <p className="text-sm">Agrega productos del men√∫</p>
              </div>
            </div>
          ) : (
            <>
              {/* Items del carrito con scroll MEJORADO */}
              <div className="flex-1 overflow-y-auto p-2 min-h-0 max-h-[350px]">
                <div className="space-y-1">
                  {getCurrentCart(getCartKey()).map(item => (
                    <div key={item.id} className="bg-gray-50 rounded-md p-2 flex items-center justify-between text-xs">
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-gray-800 text-xs leading-tight truncate">{item.name}</h4>
                        <p className="text-blue-600 font-semibold text-xs">${parseFloat(item.price).toFixed(2)} c/u</p>
                      </div>
                      <div className="flex items-center space-x-1 ml-2">
                        <button
                          onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}
                          className="w-6 h-6 rounded-full bg-red-500 text-white flex items-center justify-center hover:bg-red-600"
                        >
                          <Minus size={12} />
                        </button>
                        <span className="w-6 text-center font-semibold text-xs">{item.quantity}</span>
                        <button
                          onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}
                          className="w-6 h-6 rounded-full bg-green-500 text-white flex items-center justify-center hover:bg-green-600"
                        >
                          <Plus size={12} />
                        </button>
                        <div className="text-right min-w-[40px]">
                          <p className="font-semibold text-gray-800 text-xs">
                            ${(item.price * item.quantity).toFixed(2)}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Secci√≥n de descuentos COMPACTA */}
              <div className="p-3 border-t border-gray-200">
                {!mostrarDescuento && descuento === 0 && (
                  <button
                    onClick={() => setMostrarDescuento(true)}
                    className="w-full flex items-center justify-center space-x-2 text-green-600 hover:text-green-700 p-2 rounded-lg hover:bg-green-50 transition-colors"
                  >
                    <Percent className="w-3 h-3" />
                    <span className="text-xs font-medium">Aplicar Descuento</span>
                  </button>
                )}

                {mostrarDescuento && (
                  <div className="space-y-2 p-2 bg-green-50 rounded-lg">
                    <h4 className="font-medium text-green-800 text-sm">Configurar Descuento</h4>
                    
                    <div className="flex space-x-1">
                      <button
                        onClick={() => setTipoDescuento('porcentaje')}
                        className={`px-2 py-1 rounded text-xs ${
                          tipoDescuento === 'porcentaje'
                            ? 'bg-green-600 text-white'
                            : 'bg-white text-green-600 border'
                        }`}
                      >
                        %
                      </button>
                      <button
                        onClick={() => setTipoDescuento('fijo')}
                        className={`px-2 py-1 rounded text-xs ${
                          tipoDescuento === 'fijo'
                            ? 'bg-green-600 text-white'
                            : 'bg-white text-green-600 border'
                        }`}
                      >
                        $
                      </button>
                    </div>

                    <div className="flex space-x-1">
                      <input
                        type="number"
                        min="0"
                        max={tipoDescuento === 'porcentaje' ? 100 : getCartSubtotal()}
                        value={descuento}
                        onChange={(e) => setDescuento(Number(e.target.value))}
                        className="flex-1 px-2 py-1 border rounded text-xs"
                        placeholder={tipoDescuento === 'porcentaje' ? '0-100' : '0.00'}
                        step={tipoDescuento === 'porcentaje' ? 1 : 0.01}
                      />
                      <button
                        onClick={handleAplicarDescuento}
                        className="px-3 py-1 bg-green-600 text-white rounded text-xs hover:bg-green-700"
                      >
                        Aplicar
                      </button>
                      <button
                        onClick={() => setMostrarDescuento(false)}
                        className="px-3 py-1 bg-gray-300 text-gray-700 rounded text-xs hover:bg-gray-400"
                      >
                        Cancelar
                      </button>
                    </div>
                  </div>
                )}

                {descuento > 0 && !mostrarDescuento && (
                  <div className="flex items-center justify-between p-2 bg-green-100 rounded-lg">
                    <span className="text-green-800 text-xs">
                      Descuento {tipoDescuento === 'porcentaje' ? `${descuento}%` : `${descuento.toFixed(2)}`}
                    </span>
                    <button
                      onClick={handleQuitarDescuento}
                      className="text-green-600 hover:text-green-800"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </div>
                )}
              </div>

              {/* Informaci√≥n del cliente para delivery */}
              {orderType === 'delivery' && selectedCustomer && (
                <div className="p-3 bg-orange-50 border-t border-orange-200">
                  <div className="flex items-center mb-2">
                    <MapPin className="mr-2 text-orange-600" size={14} />
                    <span className="font-semibold text-gray-800 text-sm">Direcci√≥n de entrega:</span>
                  </div>
                  <p className="text-xs text-gray-700">{selectedCustomer.address1}</p>
                  {selectedCustomer.address2 && (
                    <p className="text-xs text-gray-700">{selectedCustomer.address2}</p>
                  )}
                  <p className="text-xs text-gray-700">{selectedCustomer.city}</p>
                  <p className="text-xs text-gray-600 mt-1">Tel: {selectedCustomer.phone}</p>
                </div>
              )}

              {/* Totales SIN IVA y CON DESCUENTOS */}
              <div className="p-3 border-t border-gray-200 bg-gray-50">
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Subtotal:</span>
                    <span className="font-medium">${getCartSubtotal().toFixed(2)}</span>
                  </div>
                  
                  {descuento > 0 && (
                    <div className="flex justify-between text-sm text-green-600">
                      <span>Descuento:</span>
                      <span>-${getCartDiscount().toFixed(2)}</span>
                    </div>
                  )}
                  
                  <div className="flex justify-between text-lg font-bold pt-1 border-t border-gray-200">
                    <span>Total:</span>
                    <span className="text-green-600">${getCartTotal().toFixed(2)}</span>
                  </div>
                </div>
              </div>

              {/* Botones de acci√≥n - SIEMPRE VISIBLES */}
              <div className="p-3 bg-gray-50 space-y-2">
                <button
                  onClick={() => setShowPayment(true)}
                  disabled={loading}
                  className="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors font-semibold flex items-center justify-center text-sm disabled:opacity-50"
                >
                  <CreditCard className="w-4 h-4 mr-2" />
                  Procesar Pago - ${getCartTotal().toFixed(2)}
                </button>
                <button
                  onClick={handleClearCart}
                  disabled={loading}
                  className="w-full bg-red-500 text-white py-1 rounded-lg hover:bg-red-600 transition-colors flex items-center justify-center text-sm disabled:opacity-50"
                >
                  <Trash2 className="w-3 h-3 mr-2" />
                  Limpiar Carrito
                </button>
              </div>
            </>
          )}
        </div>
      </div>

      {/* Modal de Cliente Nuevo */}
      {showCustomerModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg w-96 max-w-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Nuevo Cliente</h3>
              <button
                onClick={() => setShowCustomerModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={20} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tel√©fono *</label>
                <input
                  type="tel"
                  value={newCustomer.phone}
                  onChange={(e) => setNewCustomer(prev => ({ ...prev, phone: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="3331234567"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Nombre *</label>
                <input
                  type="text"
                  value={newCustomer.name}
                  onChange={(e) => setNewCustomer(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Juan P√©rez"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Direcci√≥n 1 *</label>
                <input
                  type="text"
                  value={newCustomer.address1}
                  onChange={(e) => setNewCustomer(prev => ({ ...prev, address1: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Av. Principal 123"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Direcci√≥n 2</label>
                <input
                  type="text"
                  value={newCustomer.address2}
                  onChange={(e) => setNewCustomer(prev => ({ ...prev, address2: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Col. Centro, Int. 5"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Ciudad</label>
                <input
                  type="text"
                  value={newCustomer.city}
                  onChange={(e) => setNewCustomer(prev => ({ ...prev, city: e.target.value }))}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                  placeholder="Ciudad Guzm√°n"
                />
              </div>
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setShowCustomerModal(false)}
                className="flex-1 bg-gray-200 text-gray-700 py-2 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={createCustomer}
                className="flex-1 bg-orange-600 text-white py-2 rounded-lg hover:bg-orange-700 transition-colors"
              >
                Guardar Cliente
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Pago MEJORADO */}
      {showPayment && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold">Procesar Pago</h3>
              <button 
                onClick={() => setShowPayment(false)}
                className="p-2 hover:bg-gray-100 rounded-full"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="mb-6">
              <div className="bg-gray-50 p-4 rounded-lg mb-4">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span>Subtotal:</span>
                    <span>${getCartSubtotal().toFixed(2)}</span>
                  </div>
                  {descuento > 0 && (
                    <div className="flex justify-between text-green-600">
                      <span>Descuento:</span>
                      <span>-${getCartDiscount().toFixed(2)}</span>
                    </div>
                  )}
                  <div className="flex justify-between font-bold text-lg border-t pt-2">
                    <span>Total:</span>
                    <span>${getCartTotal().toFixed(2)}</span>
                  </div>
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium mb-2">M√©todo de pago:</label>
                <div className="grid grid-cols-2 gap-2">
                  {[
                    { value: 'cash', label: 'Efectivo' },
                    { value: 'card', label: 'Tarjeta' },
                    { value: 'transfer', label: 'Transferencia' },
                    { value: 'mixed', label: 'Mixto' }
                  ].map(method => (
                    <button
                      key={method.value}
                      onClick={() => setPaymentMethod(method.value)}
                      className={`p-3 rounded-lg border transition-colors ${
                        paymentMethod === method.value
                          ? 'bg-blue-100 border-blue-300 text-blue-700'
                          : 'bg-white border-gray-300 hover:bg-gray-50'
                      }`}
                    >
                      {method.label}
                    </button>
                  ))}
                </div>
              </div>
            </div>

            <div className="flex space-x-3">
              <button
                onClick={() => setShowPayment(false)}
                className="flex-1 py-3 px-4 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={processSale}
                disabled={loading}
                className="flex-1 py-3 px-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 flex items-center justify-center"
              >
                {loading ? (
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ) : (
                  <>
                    <Check className="w-5 h-5 mr-2" />
                    Procesar Pago
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UnifiedPOSView;